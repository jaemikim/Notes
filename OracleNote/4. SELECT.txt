0. SQL 종류
  1) DDL (Data Definition Language)
    - 데이터 정의어 
    - 스키마 구조와 제약조건 등을 정의, 수정, 삭제
    - 테이블을 생성, 변경, 제거하는 기능을 제공
  2) DML (Date Maniplation Language)
    - 데이터 조작어
    - 데이터의 삽입, 삭제, 수정, 검색
      - 테이블에 새 데이터를 삽입
      - 테이블에 저장된 데이터를 수정, 삭제하는 기능을 제공
    - 테이블의 레코드를 CRUD(Create, Retrieve, Update, Delete)
    - INSERT, SELECT, UPDATE, DELETE 
  3) DCL (Data Control Language)
    - 보안을 위해 데이터에 대한 접근 및 사용권한을 조절하는 기능 제공
  4) TCL (Transaction Control Language)
  
  


1. SELECT 문 기본
                                                                          <해석순서>
  1) SELECT [] { * | <COLUMN_NAME> [별칭], .... }                            (3)
     FROM 테이블 이름(들) [AS 테이블이름 별칭]                                 (1)
     [WHERE 검색조건 (들)]                                                    (2)
     [ORDER BY 속성이름 [ASC|DESC]]    -- ORDER BY 정렬 마지막에 적용          (4)

    - ALL : 튜플의 중복을 허용하도록 지정
    - DISTINCT : 튜플의 중복을 허용하지 않도록 지정
      ㆍ중복을 제거한 유일 집합을 추출

    - AS 키워드
      ㆍ별칭(앨리어스)을 사용해서 테이블 및 컬럼에 대한 이름(별칭)을 지정할 수 있음
      ㆍ앨리어스 사용시 "AS" 키워드 생략 가능
      ㆍ앨리어스에 공백이 있을 경우 ""로 감쌈
      ㆍ앨리어스명으로 한글도 줄수 있음
    - 산술식을 이용한 검색
      ㆍ비교 연산자 (=, <>-다른다, <, >, <=, >=)
      ㆍ논리 연산자 (AND, OR, NOT)
      ㆍBETWEEN 연산자 (값에 범위에 대한 조건에 부합하는 결과 집합(행들)을 리턴)
      ㆍNOT BETWEEN 연산자

      ㆍIN 연산자
        = 특정 목록과 일치하는 값이 있으면 결과집합으로 리턴함
        = IN 연산자 OR 연산은 결과집합이 동일함
      ㆍNOT IN 연산자
      
      ㆍLIKE 연산자
        = 특정 패턴과 일치하는 조건으로 데이터를 조회함
        = 와일드 카드 %, _ 과 함께 사용
        = %
          - 무엇이 나오든지 나오지 않던지 상관이 없다는 뜻임
          - 와일드 카드 % 앞/뒤 사용(%Jen%)
           ex) (%Jen%)
            - Jen
            - iJen
            - JenA
            - IJenA
            - 값이 어떤걸로 시작해서 어떤걸로 끝나던지간에 'Jen'만 존재하면 리턴함
          - _(언더바)
            - 무엇이든지 한자리의 문자를 의미함
            ___(3개 언더바)
            - 무엇이든지 간에 3자리만 딱 있으면 리턴함
          - _% (언더바퍼센트)
            - Jen___%          
              - Jen으로 시작하면서 총 6자리 이상인 모든 행을 리턴함

2. inline view
  1) SELECT문의 FROM절 내부에 있는 또 다른 SELECT문
  2) 인라인 뷰 내에 있는 SELECT문의 FROM절에 또 다른 인라인 뷰를 넣을 수도 있음
    - 인라인 뷰 안에 인라인 뷰 가능
  3) 예) 연도별 각 고객의 매출 금액 구하기 뷰 생성
    - 뷰 만들면 SELECT문을 반복적으로 Typing 할 필요없이 해당 뷰를 SELECT하면 됨
  4) 장점
    - 독립성
      ㆍ테이블 구조가 변경되어도 뷰를 사용하는 응용프로그램은 변경하지 않아도 됨
    - 편리성
      ㆍ복잡한 질의를 뷰로 생성함으로써 관련 질의를 단순하게 작성할 수 있음
    - 보안성
      ㆍ예) 직원의 급여 정보와 같이 숨기고 싶은 정보가 존재한다면, 
           뷰를 생성할 때 해당 컬럼을 빼고 생성함 => 사용자에게 정보가 검춰짐
    
3. 서브 쿼리 
  1) 서브 쿼리 기본
  2) 스칼라 서브 쿼리 
  3) 인라인 뷰 서브 쿼리 
    - FROM 절에 사용되는 SELECT문.
    - 인라인 뷰는 서브 쿼리의 종류 중 하나임

4. SELECT문 추가 옵션 구문
                                                                          <해석순서>
  1) SELECT [] { * | <COLUMN_NAME> [별칭], .... }                            (5)
     FROM 테이블 이름(들) [AS 테이블이름 별칭]                                 (1)
     [WHERE 검색조건 (들)]                                                    (2)
     [GROUP BY 속성이름]                                                      (3)
     [HAVING   검색조건(들)]                                                  (4)
     [ORDER BY 속성이름 [ASC|DESC]]    -- ORDER BY 정렬 마지막에 적용          (6)

      - 그룹별 검색(GROUP BY)
        ㆍ특성 속성의 값이 같은 튜플을 모아 그룹을 만들고, 그 그룹별로 검색 
        ㆍHAVING키워드를 함께 이용해 그룹에 대한 조건을 작성
        ㆍSELECT절에 등장한 컬럼은 GROUP BY에 모두 병시해야 함
          = 집게함수 제외
      - GROUP BY 절
       ㆍ소그룹 별 기준을 정한 후, SELECT 절에 집계 함수를 사용함
       ㆍ집계 함수의 통계 정보는 NULL 값을 가진 행을 제외하고 수행함
       ㆍGROUP BY절에는 SELECT절과는 달리 ALIA명을 사용할수 없음
       ㆍ집계 함수는 WHERE절에는 올수 없음
       ㆍHAVING절은 GROUP BY절의 기준 항목이나 소그룹의 집계 함수를 이용한 조건을 표시할 수 있음
         = GROUP BY절에 의한 소 그룹벼로 만들어진 집계 데이터 중, 
           HAVING절에서 제한 조건을 두어 조건을 만족하는 내용만 출력함
       ㆍHAVING 절은 일반적으로 GROUP BY절 뒤에 위치함 
      
      - HAVING 절
        ㆍWHERE절에서는 집계 함수를 쓸수 없음
        ㆍ집계된 결과 집합을 기준으로 특정 조건을 주고 싶은 경우 HAVING절 이용하면 됨
        ㆍHAVING절은 WHERE절과 비슷하지만 
          그룹을 나타내는 결과 집합의 행에 조건이 적용된다는 점에서 차이가 있음

      - WHERE절과 HAVING절
        ㆍWHERE : "집계 전" 데이터를 필터링
          = WHERE절에는 집계함수가 올 수 없음
        ㆍHAVING : "집계 후" 데이터를 필터링
          = HAVING절에는 집계함수만 올 수 있음   

5. 집계 함수
  1) 여러 행들의 그룹이 모여서 그룹당 단 하나의 결과를 돌려주는 함수
  2) GROUP BY 절은 행들을 소 그룹화 함
  3) SELECT절, HAVING절, ORDER BY절에 사용 가능함
  4) 종류
    - COUNT(*)
     ㆍNULL값을 포함한 행의 수를 출력
    - COUNT(표혀식)
     ㆍ표현식의 값이 NULL아닌 행의 수를 출력
    - SUM(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 합계를 출력
    - AVG(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 평균을 출력
    - MAX(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 최대값을 출력
    - MIX(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 최소값을 출력
    - STDDEV(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 표준편차을 출력
    - VARIAN(표현식)
     ㆍ표현식의 값이 NULL값인 것을 제외한 분산을 출력
    
  
    

스칼라 방향이 없다
벡터는 방향을 

SELECT[DISTINCT] - 중복제거

  
스토리보드 양식 무료

일정을 정리해서 애기를 